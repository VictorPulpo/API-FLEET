meta {
  name: POST Insert Fuel
  type: http
  seq: 1
}

post {
  url: {{host}}/api/v1/fuels
  body: multipartForm
  auth: none
}

headers {
  external-authorization: {{auth_token}}
}

body:form-urlencoded {
  volume: 2
  pricePerUnit: 2
  tax: 0
  taxType: PERCENTAGE
  discountType: PERCENTAGE
  discount: 0
  total: 4
  date: %7B%7BfechaActual%7D%7D
  fuelTypeId: %7B%7BfuelTypeId%7D%7D
  vehicleId: %7B%7BvehicleId%7D%7D
  driverId: %7B%7BdriverId%7D%7D
  supplierId: %7B%7BsupplierId%7D%7D
  reference: Test%20API
  paymentMethodId: %7B%7BpaymentMethodId%7D%7D
  ~customFieldsMetadata: %7B%7D
  ~locationId: 
  ~odometer: 19
  ~tags: %5B%5D
  ~segments: %5B%5D
}

script:pre-request {
  // var randomNumber = Math.floor(Math.random()*10)
  // postman.setEnvironmentVariable("randomNumber", randomNumber);
}

tests {
  // pm.test("Successful POST request", function () {
  //     pm.expect(pm.response.code).to.be.oneOf([201, 202]);
  // });
  // 
  // var jsonData = JSON.parse(responseBody);
  // postman.setEnvironmentVariable("fuelId", jsonData.id);
  // 
  // pm.test("Time response", function () {
  //   //  pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get("time")));
  // });
  // 
  // pm.test("Body is correct", () => {
  //     pm.expect(jsonData.pricePerUnit).to.be.an("number");
  //     pm.expect(jsonData.hasTankInconsistency).to.be.an("boolean");
  //     pm.expect(jsonData.reference).to.be.an("string");
  //     pm.expect(jsonData.filterDate).to.be.an("string");
  //     pm.expect(jsonData.account).to.be.an("object");
  //     pm.expect(jsonData.driver).to.be.an("object");
  //     pm.expect(jsonData.supplier).to.be.an("object");
  //     pm.expect(jsonData.paymentMethod).to.be.an("object");
  //     pm.expect(jsonData.createAt).to.be.an("string");
  //     pm.expect(jsonData.updateAt).to.be.an("string");
  //     pm.expect(jsonData.id).to.be.an("string");
  //     pm.expect(jsonData.createAt).to.be.an("string");
  //     pm.expect(jsonData.updateAt).to.be.an("string");
  //     pm.expect(jsonData.documents).to.be.an("array");
  //     pm.expect(jsonData.isActive).to.be.an("boolean");
  //     pm.expect(jsonData.settled).to.be.an("boolean");
  //     pm.expect(jsonData.segments).to.be.an("array");
  //     pm.expect(jsonData.vehicle).to.be.an("object");
  //     pm.expect(jsonData.location).to.be.an("null");
  //     pm.expect(jsonData.date).to.be.an("string");
  //     pm.expect(jsonData.fuelType).to.be.an("object");
  //     pm.expect(jsonData.volume).to.be.an("number");
  //     pm.expect(jsonData.volume).to.be.an("number");
  //     pm.expect(jsonData.taxType).to.be.an("string");
  //     pm.expect(jsonData.tax).to.be.an("number");
  //     pm.expect(jsonData.calculatedTax).to.be.an("number");
  //     pm.expect(jsonData.discountType).to.be.an("string");
  //     pm.expect(jsonData.discount).to.be.an("number");
  //     pm.expect(jsonData.calculatedDiscount).to.be.an("number");
  //     pm.expect(jsonData.subtotal).to.be.an("number");
  //     pm.expect(jsonData.total).to.be.an("number");
  //     pm.expect(jsonData.currentCurrency).to.be.an("string");
  //     //pm.expect(jsonData.odometer).to.be.an("number");
  //     pm.expect(jsonData.vehicleId).to.be.an("number");
  //     pm.expect(jsonData.tankPercentage).to.be.an("string");
  //     pm.expect(jsonData.tags).to.be.an("null");
  //     pm.expect(jsonData.registrationDateISO).to.be.an("string");
  //     pm.expect(jsonData.customFieldsMetadata).to.be.an("object");
  // });
}
